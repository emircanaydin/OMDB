//
//  DetailPresenter.swift
//  OMDB
//
//  Created by Emircan Aydın on 6.11.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift

final class DetailPresenter {

    // MARK: - Private properties -

    private unowned let view: DetailViewInterface
    private let interactor: DetailInteractorInterface
    private let wireframe: DetailWireframeInterface
    
    private var dataState: MovieDetailDataBlock?
    private var movieImdbId: String?
    private var disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    init(
        view: DetailViewInterface,
        interactor: DetailInteractorInterface,
        wireframe: DetailWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    func viewDidLoad() {
        getData()
        subscribeOperationManagerPublisher()
    }
    
    private func getData() {
        interactor.getMovieDetail(with: DetailRequestModel(apiKey: ApiKey.omdb.value, imdbID: movieImdbId ?? ""))
    }
    
    private func subscribeOperationManagerPublisher() {
        interactor.subscribeDataPublisher { [weak self] result in
            switch result {
            case .failure(_): break
            case .success(let response):
                self?.dataHandler(with: response)
            }
        }.disposed(by: disposeBag)
    }
    
    private func dataHandler(with response: Movie) {
        let detailViewData = getDetailViewData(with: response)
        dataState?(detailViewData)
    }
    
    private func getDetailViewData(with movie: Movie) -> MovieDetailViewData {
        
        var infoDataList = [MovieDetailInfoViewData]()
        infoDataList.append(MovieDetailInfoViewData(genre: movie.genre, plot: movie.plot))
        
        return MovieDetailViewData()
            .setHeaderViewData(by: MovieDetailHeaderViewData(imageContainerData: CustomImageViewComponentData(imageUrl: movie.poster)))
            .setFooterViewData(by: MovieDetailFooterViewData(director: movie.director, writers: movie.writer, actors: movie.actors, releasedDate: movie.released))
            .setInfoViewData(by: infoDataList)
            
    }
}

// MARK: - Extensions -

extension DetailPresenter: DetailPresenterInterface {
    
    func setupImdbId(by id: String) -> Self {
        self.movieImdbId = id
        return self
    }
    
    func listenDataState(completion: @escaping MovieDetailDataBlock) {
        dataState = completion
    }
}
