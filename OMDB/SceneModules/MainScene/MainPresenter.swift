//
//  MainPresenter.swift
//  OMDB
//
//  Created by Emircan Aydın on 5.11.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxSwift

final class MainPresenter {

    // MARK: - Private properties -

    private unowned let view: MainViewInterface
    private let formatter: MainFormatterInterface
    private let interactor: MainInteractorInterface
    private let wireframe: MainWireframeInterface
    
    private var searchTerm: String = ""
    private var viewDataStateCompletion: MainViewDataStateBlock?
    private var disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    init(
        view: MainViewInterface,
        formatter: MainFormatterInterface,
        interactor: MainInteractorInterface,
        wireframe: MainWireframeInterface
    ) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    func search() {
        interactor.search(with: SearchRequestModel(apiKey: ApiKey.omdb.value, searchTerm: searchTerm, page: formatter.getPage()))
    }
    
    func getSearchControllerData() -> SearchControllerData {
        return formatter.getSearchControllerData(with: searchControllerTextListener)
    }
    
    func subscribeViewDataState(with completion: @escaping MainViewDataStateBlock) {
        viewDataStateCompletion = completion
    }
    
    private func subscribeOperationManagerPublisher() {
        interactor.subscribeDataPublisher { [weak self] result in
            switch result {
            case .failure(_):
                break
            case .success(let response):
                self?.dataHandler(with: response)
            }
        }.disposed(by: disposeBag)
    }
    
    private func dataHandler(with response: SearchResponse) {
        formatter.paginationInfo.fetching = false
        formatter.setData(with: response)
        
        guard formatter.getPage() == 1 else {
            viewDataStateCompletion?(.moreData)
            return
        }
        
        viewDataStateCompletion?(.newData)
    }
    
    private lazy var searchControllerTextListener: TextChangeBlock = { [weak self] term in
        self?.formatter.clearData()
        self?.searchTerm = term ?? ""
        self?.searchTerm = self?.searchTerm.replacingOccurrences(of: " ", with: "+") ?? ""
        self?.search()
    }
}

// MARK: - Extensions -

extension MainPresenter: MainPresenterInterface {
    
    func viewDidLoad() {
        subscribeOperationManagerPublisher()
    }
    
    func getItemCount(in section: Int) -> Int {
        return formatter.getNumberOfItem(in: section)
    }
    
    func getData(at index: Int) -> GenericDataProtocol? {
        return formatter.getItem(at: index)
    }
    
    func getMoreData() {
        guard formatter.paginationInfo.checkLoadingMore() else { return }
        formatter.paginationInfo.nextOffset()
        search()
    }
    
    func isLoadingCell(for index: Int) -> Bool {
        return index >= formatter.getCount()
    }
    
    func selectedItem(at index: Int) {
        // gotodetailpage
    }
    
}
